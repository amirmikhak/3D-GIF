var Neopixels = require('neopixels');
var CubeRenderer = require('./cubeRenderer');
var applyOptions = require('./applyOptions');

var CubeL3DRenderer = function(opts) {

    CubeRenderer.apply(this, arguments);

    this._options = {};

    var __defaultOptions = {};

    var __parentDefaultOptions = this.getDefaultOptions();
    var _parentOptionKeys = Object.keys(__parentDefaultOptions);
    for (var i = 0, numOpts = _parentOptionKeys.length; i < numOpts; i++) {
        __defaultOptions[_parentOptionKeys[i]] = (_parentOptionKeys[i] in __defaultOptions) ?
            __defaultOptions[_parentOptionKeys[i]] :
            __parentDefaultOptions[_parentOptionKeys[i]];
    }

    var _opts = opts || {};
    var _optionKeys = Object.keys(__defaultOptions);
    for (var i = 0, numOpts = _optionKeys.length; i < numOpts; i++) {
        this._options[_optionKeys[i]] = (_optionKeys[i] in _opts) ?
            _opts[_optionKeys[i]] :
            __defaultOptions[_optionKeys[i]];
    }

    this._np = new Neopixels();
    this._buffer = new Buffer(512 * 3);
    this._buffer.fill(0);

    this._animationStartTime = (new Date()).getTime();
    this._renderStartTime = this._animationStartTime;
    this._lastRendererTime = this._animationStartTime;
    this.__animationFrameRef = 0;
    this.__getRenderFrameCb = function() { console.log('default __getRenderFrameCb()'); };

    this.getDefaultOptions = function() {
        return __defaultOptions;
    };

    applyOptions.call(this, this._options);

    return this;

};

CubeL3DRenderer.prototype = Object.create(CubeRenderer.prototype);
CubeL3DRenderer.prototype.constructor = CubeL3DRenderer;

Object.defineProperty(CubeL3DRenderer.prototype, 'animationStartTime', {
    get: function() { return this._animationStartTime; },
});

Object.defineProperty(CubeL3DRenderer.prototype, 'lastRenderedTime', {
    get: function() { return this._lastRenderedTime; },
});

Object.defineProperty(CubeL3DRenderer.prototype, 'renderStartTime', {
    get: function() { return this._renderStartTime; },
});

CubeL3DRenderer.prototype.render = function(cubeData) {
    if (!this._running)
    {
        console.log('not _running, returning');
        return;
    } else if (this.cube === cubeData)
    {
        console.log('render prev frame');
        this._np.animate(512, this._buffer, this._renderStep.bind(this));
        return this;
    }

    var t0 = new Date().getTime();
    this._prevCube = this.cube;
    this.cube = cubeData;

    for (var i = 0, numCells = 512; i < numCells; i++)
    {
        var cell = this.cube.cells[i];
        var ci = i * 3;
        if (cell.on)
        {
            this._buffer[ci] = Math.floor(parseInt(cell.color[1], 10) / 16);
            this._buffer[ci + 1] = Math.floor(parseInt(cell.color[0], 10) / 16);
            this._buffer[ci + 2] = Math.floor(parseInt(cell.color[2], 10) / 16);
        } else
        {
            this._buffer[ci] = this._buffer[ci + 1] = this._buffer[ci + 2] = 0;
        }
    }

    var t1 = new Date().getTime();
    // console.log('rbufft', t1 - t0);

    this._np.animate(512, this._buffer, this._renderStep.bind(this));
    return this;
};

CubeL3DRenderer.prototype._renderStep = function() {
    this._renderStartTime = (new Date()).getTime();

    var frame = this.__getRenderFrameCb(this._renderStartTime - this._animationStartTime);
    // console.log(frame.cells.map(function(c) {
    //     return c.on + ':' + c.color.join('-');
    // }));

    this.render(frame);
    this._lastRendererTime = this._renderStartTime;
    return this;
};

CubeL3DRenderer.prototype.resetAnimationTimes = function() {
    this._lastRenderedTime = this._renderStartTime = this._animationStartTime = (new Date()).getTime();
    return this;
};

CubeL3DRenderer.prototype.startRenderLoop = function(getRenderFrame) {
    if (typeof getRenderFrame !== 'function')
    {
        console.error('Invalid render callback for startRenderLoop: ' +
            'must be a function', getRenderFrame);
        throw 'Invalid getRenderFrame';
    }
    this.resetAnimationTimes();
    this.__getRenderFrameCb = getRenderFrame;
    this._running = true;
    this._renderStep();
    return this;
};

CubeL3DRenderer.prototype.stopRenderLoop = function() {
    this._running = false;
    this.resetAnimationTimes();
    return this;
};

module.exports = CubeL3DRenderer;
