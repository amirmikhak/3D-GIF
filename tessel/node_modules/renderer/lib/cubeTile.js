var applyOptions = require('./applyOptions');
var tryJSON = require('./tryJSON');
var Cell = require('./cell');

var CubeTile = function CubeTile(cells, cellOpts, shallow) {
    var _cellOpts = cellOpts || {};

    var _shallow = !!shallow;

    var __sliceValidator = function(dataToValidate) {
        return (dataToValidate.length) && (dataToValidate.length === 64);
    };

    var __copyCell = function(originalCell, addlCellOpts, __shallow) {
        var mergedCellOptions = {
            row: originalCell.row,
            column: originalCell.column,
            depth: originalCell.depth,
            on: originalCell.on,
            color: originalCell.color,
        };
        var optionKeys = Object.keys(mergedCellOptions);
        for (var i = 0, numOpts = optionKeys.length; i < numOpts; i++) {
            if (optionKeys[i] in addlCellOpts)
            {
                mergedCellOptions[optionKeys[i]] = addlCellOpts[optionKeys[i]];
            }
        }
        if (__shallow)
        {
            return applyOptions.call(originalCell, mergedCellOptions);
        }
        return new Cell(mergedCellOptions);
    };

    var _cells = tryJSON(cells, __sliceValidator);
    for (var i = 0, numCells = cells.length; i < numCells; i++)
    {
        _cells[i] = __copyCell(_cells[i], _cellOpts, _shallow);
    }

    Object.defineProperty(this, 'cells', {
        get: function() { return _cells.slice(); },
    });

    this.getAsStrips = function() {
        var strips = [[],[],[],[],[],[],[],[]];
        for (var i = 0; i < 8; i++)
        {
            for (var j = 0; j < 8; j++)
            {
                strips[i][j] = _cells[Math.floor(i * 8) + j];
            }
        }
        return strips;
    };

    this.setFromStrips = function(strips) {
        var __stripIsInvalid = function(strip) {
            return !(strip.length) || (strip.length !== 8);
        };

        if (!(strips instanceof Array) ||
            (strips.length !== 8) ||
            strips.some(__stripIsInvalid))
        {
            console.error('Invalid strips provided. Cannot compose.');
            return;
        }

        for (var i = 0; i < 8; i++)
        {
            for (var j = 0; j < 8; j++)
            {
                _cells[Math.floor(i * 8) + j] = strips[i][j];
            }
        }

        return this;
    };

    this.reflectX = function() {
        return this.setFromStrips(this.getAsStrips().reverse());
    };

    this.reflectY = function() {
        var _reflectedCells = [];

        for (var col = 0; col < 8; col++)
        {
            var reflectedRow = [];
            for (var row = 0; row < 8; row++)
            {
                reflectedRow.unshift(_cells[(col * 8) + row]);
            }

            _reflectedCells = _reflectedCells.concat(reflectedRow);
        }

        _cells = _reflectedCells;

        return this;
    };

    return this;
};

CubeTile.prototype.getCellOnStates = function() {
    return this.cells.map(function(cell) { return cell.on ? 1 : 0; }).toString();
};

module.exports = CubeTile;
