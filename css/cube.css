@-webkit-keyframes breathingBackground {
    0% { background-size: 200%; }
    50% { background-size: 100%; }
    100% { background-size: 200%; }
}

@-webkit-keyframes rightSlidingBackground {
    from { background-position-x: 0; }
    to { background-position-x: 100%; }
}

@-webkit-keyframes rightLeftSlidingBackground {
    0% { background-position-x: 0; }
    50% { background-position-x: 100%; }
    100% { background-position-x: 0; }
}

#container {
    perspective: 3000px;
    /* This places the z=0 plane away from us, so the entire cube is in front of us; you can read more at https://developer.mozilla.org/en-US/docs/Web/CSS/perspective */
}

#controls {
    width: 100%;
    font-family: 'Codystar', cursive;
    font-size: 2.5em;
    letter-spacing: 0.125em;
    text-align: center;
    text-transform: uppercase;
}

#controls .control-button {
    position: relative;
    margin-top: 32px;
    padding: 16px 32px;
    border: 1px solid #ccc;
    cursor: pointer;
    display: inline-block;
    width: auto;
    color: rgba(0, 0, 0, 0);  /* transparent because the :after element's text is what actually shows */
    font-weight: 600;
    -webkit-user-select: none;
}

#controls .control-button:after {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    padding-top: 16px;
    background-color: rgba(20, 20, 20, 0.5);
    color: #fff;
    opacity: 1;
    transition:
        opacity 100ms ease-in-out,
        background-color 100ms ease-in-out
        color 100ms ease-in-out;
}

#step {
    background-color: rgba(255, 255, 200, 1);
    background-image: url('../imgs/bg-step.jpg');
    background-position-x: 0;
    background-position-y: 50%;
    background-repeat: no-repeat;
}

#step:hover {
    -webkit-animation: rightLeftSlidingBackground 30s linear infinite;
}

#step:active:after {
    background-color: rgba(20, 20, 20, 0.3);
}

#step:after {
    content: 'Step';
}

#clear {
    background-color: rgba(255, 200, 200, 1);
    background-image: url('../imgs/bg-clear.jpg');
    background-position: 50% 50%;
    background-repeat: no-repeat;
}

#clear:hover {
    -webkit-animation: breathingBackground 3s ease-in-out infinite;
}

#clear:active {
    background-color: rgba(255, 150, 150, 1);
}

#clear:after {
    content: 'Clear';
}

#play {
    background-color: rgba(200, 255, 200, 1);
    background-image: url('../imgs/bg-playing.jpg');
    background-position-y: 55%;
    background-repeat: repeat-x;
}

#play.playing,
#play.playing:hover {
    -webkit-animation: rightSlidingBackground 1s linear infinite;
}

#play.playing:after {
    background-color: rgba(0, 0, 0, 0);
}

#play:after {
    content: 'Play';
}

#play:hover {
    -webkit-animation: rightSlidingBackground 5s linear infinite;
}

#play:active {
    background-color: rgba(150, 255, 150, 1);
}

#playback-controls,
#playback-controls input {
    text-align: center;
    font-family: 'Helvetica Neue';
    font-size: 20px;
}

#cube {
    position: relative;
    margin: 100px auto;
}

.cell {
    position: absolute;
    border: 1px solid rgba(0, 0, 0, 0);
    background-color: rgba(0, 0, 0, 0);
    opacity: 0.8;
}

.cell:after {
    /*
     * @amirmikhak
     * Mimic the vertical "sticks" to which the LEDs are attached in the cube
     */
    content: '';    /* necessary to make the pseudo-element render */
    position: absolute;
    top: 0;
    left: calc(50% - 1px);
    bottom: 0;
    right: calc(50%);
    border: 1px solid #ccc;
}

.cell:not([data-depth="0"])  {
    /*
     * @amirmikhak
     * The top row needs to cut the "stick" in half because it doesn't continue above
     * the LED in the actual box.
     */
     opacity: 0.2;
}

.cell[data-row="0"]:after  {
    /*
     * @amirmikhak
     * The top row needs to cut the "stick" in half because it doesn't continue above
     * the LED in the actual box.
     */
    top: 50%;
}

.cell[data-row="7"]:before  {
    /*
     * @amirmikhak
     * This style is an effort to make show a "base" for the cube, but it doesn't work.
     * Instead, the rotateX(90deg) makes the element invisible from the front face, but
     * is also not visible from the side or bottom. I'm not sure why elements seem not
     * to have any depth...
     */
    transform: translateY(50%) rotateX(90deg);
    content: '';
    position: absolute;
    top: 0;
    bottom: 0;
    left: 0;
    right: 0;
    background-color: rgba(50, 50, 50, 0.5);
}

.led {
    position: relative;
    width: 15%;
    height: 15%;
    border-radius: 50%;
    top: 50%;
    left: 50%;
    /* Center the led vertically and horizontally in the cell; you can read more about the technique at http://zerosixthree.se/vertical-align-anything-with-just-3-lines-of-css/ */
    transform: translateY(-50%) translateX(-50%);

    /*
     * @amirmikhak
     * Show the LED "in front" of the "stick" that holds the LEDs.
     */
    z-index: 1;
}

.led.on {
    opacity: 1;
}

.led:not(.on) {
    /* A selector for all LEDs which do _not_ have the class 'on', you can read more at https://developer.mozilla.org/en-US/docs/Web/CSS/:not */

    opacity: 0.25;
}

.radio-tabs {
    margin: 16px auto;
    min-width: 700px;
    display: inline-block;
    font-size: 0;
    text-align: left;
    -webkit-user-select: none;
}

.radio-tabs input[type="radio"] {
    display: none;
}

.radio-tabs .radio-tab {
    box-sizing: border-box;
    display: inline-block;
    padding: 8px 16px;
    border-width: 1px;
    border-style: solid;
    border-color: #999;
    border-left: none;
    background: #ccc;
    color: #333;
    font-size: 18px;
    cursor: pointer;
    text-align: center;
}

.radio-tabs input[type="radio"]:checked + .radio-tab {
    background: #555;
    color: #fff;
    border-top-color: #777;
    border-bottom-color: #777;
}

.radio-tabs .radio-tab + .radio-tab {
    border-left-color: #aaa;
}

.radio-tab:first-of-type {
    border-top-left-radius: 10px;
    border-bottom-left-radius: 10px;
}

.radio-tab:last-of-type {
    border-top-right-radius: 10px;
    border-bottom-right-radius: 10px;
}


/**
 * @amirmikhak
 * All values are mulitiplied by two because of the hidden input elements
 * messing up the counts. All of this CSS trickery is to help reduce the amount
 * of Javascript necessary to keep the state of the DOM in sync with the cube.
 */

/* one item */
.radio-tabs > *:first-child:nth-last-child(2) {
  width: 100%;
}

/* two items */
.radio-tabs > *:first-child:nth-last-child(4),
.radio-tabs > *:first-child:nth-last-child(4) ~ .radio-tab {
  width: 50%;
}

/* three items */
.radio-tabs > *:first-child:nth-last-child(6),
.radio-tabs > *:first-child:nth-last-child(6) ~ .radio-tab {
  width: 33.3333%;
}

/* four items */
.radio-tabs > *:first-child:nth-last-child(8),
.radio-tabs > *:first-child:nth-last-child(8) ~ .radio-tab {
  width: 25%;
}

/* five items */
.radio-tabs > *:first-child:nth-last-child(10),
.radio-tabs > *:first-child:nth-last-child(10) ~ .radio-tab {
  width: 20%;
}

/* six items */
.radio-tabs > *:first-child:nth-last-child(12),
.radio-tabs > *:first-child:nth-last-child(12) ~ .radio-tab {
  width: 16.6666%;
}

/**
 * @amirmikhak
 * Color List Styles
 */
.color-list {
    display: block;
    width: 28px;
    height: auto;
    border: 1px solid #ccc;
    margin: 0;
    padding: 0;
    font-size: 0;
}

.color-list .swatch {
    box-sizing: border-box;
    position: relative;
    display: inline-block;
    border: 1px solid #999;
    margin: 4px;
    width: 20px;
    height: 20px;
    cursor: pointer;
}

.color-list .swatch > div {
    box-sizing: border-box;
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: attr(data-color); /* someday this will work, but not yet. JS to the rescue! */
}

.color-list .swatch > div:after {
    content: '';
    position: absolute;
    top: 0;
    bottom: 0;
    left: 0;
    right: 0;
    background-color: rgba(50, 50, 50, 0.3);
    opacity: 1;

}

.color-list .swatch > div:hover:after {
    opacity: 0;
}

.color-list .swatch > input[type="radio"] {
    display: none;
}

.color-list .swatch:hover > div {
    opacity: 1;
}

.color-list .swatch > input[type="radio"]:checked + div {
    opacity: 1;
    border: 2px solid #ccc;
}

.color-list .swatch > input[type="radio"]:checked + div:after {
    opacity: 0;
}


/**
 * @amirmikhak
 * Shape List Styles
 */

.shape-list {
    display: block;
    width: 40px;
    height: auto;
    border: 1px solid #ccc;
    margin: 0;
    padding: 0;
    font-size: 0;
}

.shape-list .swatch {
    box-sizing: border-box;
    position: relative;
    display: inline-block;
    border: 1px solid #999;
    margin: 4px;
    width: 32px;
    height: 32px;
    cursor: pointer;
    background-size: cover;
}

.shape-list .swatch:hover {
    border-color: #555;
}